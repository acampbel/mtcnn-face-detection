var sourceData14 = {"FileContents":["function net = convertToDagNet(stage)","    ","    warnId = \"deep:functionToLayerGraph:Placeholder\";","    warnState = warning('off', warnId);","    restoreWarn = onCleanup(@() warning(warnState));","    ","    switch stage","        case \"p\"","            inputSize = 12;","            nBlocks = 3;","            finalConnections = [sprintf(\"conv_%d\", nBlocks), sprintf(\"prelu_%d\", nBlocks)];","            catConnections = [\"sm_1\", \"conv_5\"];","        case \"r\"","            inputSize = 24;","            nBlocks = 4;","            finalConnections = [\"fc_1\", sprintf(\"prelu_%d\", nBlocks)];","            catConnections = [\"sm_1\", \"fc_3\"];","        case \"o\"","            inputSize = 48;","            nBlocks = 5;","            finalConnections = [\"fc_1\", sprintf(\"prelu_%d\", nBlocks)];","            catConnections = [\"sm_1\", \"fc_3\", \"fc_4\"];","        otherwise","            error(\"mtcnn:convertToDagNet:unknownStage\", ...","            \"Stage '%s' is not recognised\", stage)","    end","","    matFilename = strcat(stage, \"net.mat\");","    weightsFile = load(fullfile(mtcnnRoot, \"weights\", matFilename));","    input = dlarray(zeros(inputSize, inputSize, 3, \"single\"), \"SSCB\");","    ","    switch stage","        case \"p\"","            netFunc = @(x) mtcnn.pnet(x, weightsFile);","            [a, b] = netFunc(input);","            output = cat(3, a, b);","        case \"r\"","            netFunc = @(x) mtcnn.rnet(x, weightsFile);","            [a, b] = netFunc(input);","            output = cat(1, a, b);","        case \"o\"","            netFunc = @(x) mtcnn.onet(x, weightsFile);","            [a, b, c] = netFunc(input);","            output = cat(1, a, b, c);","    end","    ","    if strcmp(version('-release'), \"2020b\")","        lgraph = functionToLayerGraph(netFunc, input, \"GenerateLayer\", \"placeholder-layer\");","    else","        lgraph = functionToLayerGraph(netFunc, input);","    end","    placeholders = findPlaceholderLayers(lgraph);","    lgraph = removeLayers(lgraph, {placeholders.Name});","","    for iPrelu = 1:nBlocks","        name = sprintf(\"prelu_%d\", iPrelu);","        weightName = sprintf(\"features_prelu%d_weight\", iPrelu);","        if iPrelu ~= nBlocks","            weights = weightsFile.(weightName);","        else","            weights = reshape(weightsFile.(weightName), 1, 1, []);","        end","        prelu = mtcnn.util.preluLayer(weights, name);","        lgraph = replaceLayer(lgraph, sprintf(\"plus_%d\", iPrelu), prelu, \"ReconnectBy\", \"order\");","","        if iPrelu ~= nBlocks","            lgraph = connectLayers(lgraph, sprintf(\"conv_%d\", iPrelu), sprintf(\"prelu_%d\", iPrelu));","        else","            % need to make different connections at the end of the","            % repeating blocks","            for iConnection = 1:size(finalConnections, 1)","                lgraph = connectLayers(lgraph, ...","                    finalConnections(iConnection, 1), ...","                    finalConnections(iConnection, 2));","            end","","        end","    end","","    lgraph = addLayers(lgraph, imageInputLayer([inputSize, inputSize, 3], ...","                                \"Name\", \"input\", ...","                                \"Normalization\", \"none\"));","    lgraph = connectLayers(lgraph, \"input\", \"conv_1\");","","    lgraph = addLayers(lgraph, concatenationLayer(3, numel(catConnections), \"Name\", \"concat\"));","    for iConnection = 1:numel(catConnections)","        lgraph = connectLayers(lgraph, ...","                                catConnections(iConnection), ...","                                sprintf(\"concat/in%d\", iConnection));","    end","    lgraph = addLayers(lgraph, regressionLayer(\"Name\", \"output\"));","    lgraph = connectLayers(lgraph, \"concat\", \"output\");","","    net = assembleNetwork(lgraph);","    result = net.predict(zeros(inputSize, inputSize, 3, \"single\"));","","    difference = extractdata(sum(output - result', \"all\"));","    ","    assert(difference < 1e-6, ...","        \"mtcnn:convertToDagNet:outputMismatch\", ...","        \"Outputs of function and dag net do not match\")","end"],"CoverageData":{"CoveredLineNumbers":[3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,47,48,52,53,55,56,57,58,59,60,61,63,64,66,67,68,71,72,73,74,80,83,85,86,87,88,89,91,92,94,95,97,99],"UnhitLineNumbers":[23,24,25,49,50],"HitCount":[0,0,3,3,3,0,3,3,1,1,1,1,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,3,3,0,3,3,1,1,1,2,1,1,1,1,1,1,1,0,0,3,3,0,0,0,3,3,0,3,12,12,12,9,3,3,0,12,12,0,12,9,3,0,0,3,3,3,3,0,0,0,0,0,3,0,0,3,0,3,3,7,7,7,0,3,3,0,3,3,0,3,0,3,0,0,0]}}